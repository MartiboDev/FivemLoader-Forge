import { app, BrowserWindow, dialog, ipcMain, Menu } from "electron"
import { FivemManager } from "./lib/fivemManager"
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

export const DEVELOPMENT_MODE: boolean = process.env.NODE_ENV === "development"

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
	app.quit()
}

if (DEVELOPMENT_MODE) {
	app.setPath("userData", `${app.getPath("userData")} (development)`)
}

;(async () => {
	await app.whenReady()

	const fivemManager = new FivemManager()
	fivemManager.setup()

	const mainWindow = new BrowserWindow({
		width: DEVELOPMENT_MODE ? 1600 : 1000,
		height: 600,
		resizable: false,
		webPreferences: {
			preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
			nodeIntegration: false,
			contextIsolation: true,
		},
	})

	console.log(MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY)

	// and load the index.html of the app.
	mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

	// if (DEVELOPMENT_MODE) {
	mainWindow.webContents.openDevTools()
	// } else {
	Menu.setApplicationMenu(null)
	// }
})()

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
	app.quit()
})

ipcMain.on("message", async (event, arg) => {
	event.reply("message", `${arg} World!`)
})

ipcMain.handle("select-folder", async () => {
	const folderPath = dialog.showOpenDialogSync({
		properties: ["openDirectory"],
	})

	if (!folderPath) {
		return undefined
	}

	const folderDir = folderPath[0]

	const fileManager = new FivemManager()
	fileManager.changeFivemPath(folderDir)

	return folderPath[0]
})

ipcMain.handle("change-fivem-preset", (_, preset: any) => {
	const fileManager = new FivemManager()
	fileManager.changePreset(preset)
})

ipcMain.handle("get-fivem-config", (_, preset: any) => {
	const fileManager = new FivemManager()
	return fileManager.config
})
